xaringan::inf_mr()
install.packages("modelsummary")
library(modelsummary)
datasummary_skim(mtcars)
datasummary_skim(mtcars)
data <- read.csv("data.csv")
head(data)
datasummary_skim(mtcars, type="categorical")
datasummary_skim(cars, type="categorical")
library(modelsummary)
datasummary_skim(mtcars)
datasummary(All(mtcars) ~ Mean + SD + Histogram,
data = mtcars,
output = 'markdown')
datasummary(All(mtcars) ~ Mean + SD + Histogram,
data = mtcars,
output = 'html')
datasummary(All(mtcars) ~ Mean + SD + Histogram,
data = mtcars,
output = 'text')
datasummary(All(mtcars) ~ Mean + SD + Histogram,
data = mtcars,
output = 'raw')
f <- All(mtcars) ~ Mean + SD + Min + Median + Max + Histogram
datasummary(f, mtcars, output="markdown")
library(modelsummary)
datasummary_skim(mtcars, type="numeric", output="html", histogram=T)
f <- All(mtcars) ~ Mean + SD + Min + Median + Max + Histogram
datasummary(f, mtcars, output="html")
datasummary(f, mtcars, output="markdown")
dat <- mtcars
dat$vs <- as.logical(dat$vs)
dat$cyl <- as.factor(dat$cyl)
datasummary_skim(dat)
datasummary_skim(dat)
datasummary_skim(dat, "categorical")
mtcars-df <- mtcars
mtcars-df$vs <- as.logical(mtcars-df$vs)
mtcars-df <- mtcars
mtcars_df <- mtcars
mtcars_df <- mtcars
mtcars_df$vs <- as.logical(mtcars_df$vs)
mtcars_df$cyl <- as.factor(mtcars_df$cyl)
datasummary_skim(mtcars_df)
library(modelsummary)
mtcars_df <- mtcars
mtcars_df$vs <- as.logical(mtcars_df$vs)
mtcars_df$cyl <- as.factor(mtcars_df$cyl)
datasummary_skim(mtcars, type="numeric", output="html", histogram=T)
datasummary_skim(mtcars_df, type="categorical", output="html")
library(knitr)
library(markdown)
install.packages("inline")
library(inline)
# Chunk 1: setup
knitr::opts_chunk$set(cache = FALSE)
# Use chache = TRUE if you want to speed up compilation
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
# Chunk 5
x <- 1:10
x
# Chunk 6
data <- read.csv("data.csv")
head(data)
# Chunk 7
dput(data)
library(stargazer)
stargazer(cars,
title = "Summary table with stargazer",
label="tab:summary",
table.placement = "H",
type="html",
header=FALSE)
library(knitr)
library(kableExtra)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 10)
?kable
library(modelsummary)
datasummary_skim(mtcars, type="numeric", output="html", histogram=T)
# Chunk 1: setup
knitr::opts_chunk$set(cache = FALSE)
# Use chache = TRUE if you want to speed up compilation
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
# Chunk 5
x <- 1:10
x
# Chunk 6
data <- read.csv("data.csv")
head(data)
# Chunk 7
dput(data)
library(knitr)
library(kableExtra)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 10)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 10)
library(stargazer)
model1 <- lm(speed ~ dist, data = cars)
model2 <- lm(speed ~ dist, data = cars)
model3 <- lm(dist ~ speed, data = cars)
stargazer(model1, model2, model3,
label="#tab:table-5",
table.placement = "H",
column.labels = c("M1", "M2", "M3"),
type="html",
model.numbers = FALSE,
header=FALSE)
?datasummary_skim
# Chunk 1: setup
knitr::opts_chunk$set(cache = FALSE)
# Use chache = TRUE if you want to speed up compilation
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
# Chunk 5
x <- 1:10
x
# Chunk 6
data <- read.csv("data.csv")
head(data)
# Chunk 7
dput(data)
# Chunk 9: table-2
library(knitr)
library(kableExtra)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 10)
# Chunk 1: setup
knitr::opts_chunk$set(cache = FALSE)
# Use chache = TRUE if you want to speed up compilation
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
# Chunk 5
x <- 1:10
x
# Chunk 6
data <- read.csv("data.csv")
head(data)
# Chunk 7
dput(data)
library(knitr)
library(kableExtra)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T)
library(knitr)
library(kableExtra)
kable(mtcars[1:10,], row.names = TRUE,
caption = 'Table with kable() and kablestyling()',
format = "html", booktabs = T) %>%
kable_styling(full_width = T,
latex_options = c("striped",
"scale_down",
"HOLD_position"),
font_size = 10)
library(modelsummary)
?modelsummary
library(modelsummary)
datasummary_skim(mtcars, type="numeric", output="html", histogram=T)
names(cars)
names(swiss)
datasummary_skim(mtcars, type="numeric", output="html", histogram=T) %>%
kable_styling()
library(modelsummary)
M1 <- lm(Fertility ~ Education + Agriculture, data = swiss)
M2 <- lm(Fertility ~ Education + Catholic, data = swiss)
M3 <- lm(Fertility ~ Education + Infant.Mortality + Agriculture, data = swiss)
models <- list("M1" = M1, "M2" =  M2, "M3" = M3)
modelsummary(models,
title = 'A regression table.') %>%
kable_styling()
?kable_styling
knitr::opts_chunk$set(cache = FALSE)
# Use chache = TRUE if you want to speed up compilation
# A function to allow for showing some of the inline code
rinline <- function(code){
html <- '<code  class="r">``` `r CODE` ```</code>'
sub("CODE", code, html)
}
library(plotly)
library(plotly)
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, shape=cyl)) +
geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon",
shape="Number of Cylinders")
p <- ggplotly(p) # Save plot as p
library(plotly)
mtcars$cyl <- as.factor(mtcars$cyl) # Convert cyl to factor
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, shape=cyl)) +
geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon",
shape="Number of Cylinders")
p <- ggplotly(p) # Save plot as p
p # Display plot
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, shape=cyl, color=cyl)) +
geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon",
shape="Number of Cylinders")
p <- ggplotly(p) # Save plot as p
p # Display plot
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, shape=cyl, color=cyl)) +
geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon", shape="Number of Cylinders")
p <- ggplotly(p) # Save plot as p
p # Display plot
library(ggplot2)
mtcars$cyl <- as.factor(mtcars$cyl) # Convert cyl to factor
ggplot(mtcars, aes(x=wt, y=mpg, shape=cyl)) + geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon",
shape="Number of \n Cylinders") + theme_classic()
library(plotly)
mtcars$cyl <- as.factor(mtcars$cyl) # Convert cyl to factor
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, shape=cyl, color=cyl)) +
geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon", shape="Number of Cylinders")
p <- ggplotly(p) # Save plot as p
p # Display plot
library(plotly)
mtcars$cyl <- as.factor(mtcars$cyl) # Convert cyl to factor
p <- ggplot(data = mtcars, aes(x = wt, y = mpg, shape=cyl, color=cyl)) +
geom_point() +
labs(x="Weight (lb/1000)", y = "Miles/(US) gallon", shape="Number of Cylinders")
p <- ggplotly(p) # Save plot as p
p # Display plot
library(plotly)
mtcars$cyl <- as.factor(mtcars$cyl) # Convert cyl to factor
mitcars %>%
plot_ly(x=~wt,y=~mpg,color=~cyl) %>%
add_markers() %>%
layout(xaxis=list(title="test titre àvec accenté plotly"))
mtcars %>%
plot_ly(x=~wt,y=~mpg,color=~cyl) %>%
add_markers() %>%
layout(xaxis=list(title="test titre àvec accenté plotly"))
install.packages(c("flextable", "gdtools"))
install.packages("flextable")
swiss
summary(swiss$Education)
summary(swiss$Infant.Mortality)
?Swiss
?swiss
library(ggplot2)
ggplot(mtcars, aes(x=Catholic, y=Fertility, shape=Education_cat)) + geom_point() +
labs(x="Agriculture", y = "Fertility",
shape="Education") + theme_classic()
write_csv(swiss, "data.csv")
library(readr)
write_csv(swiss, "data.csv")
dput(data %>% slice(1:10))
data <- read.csv("data.csv")
head(data)
dput(data %>% slice(1:10))
library(dplry)
library(dplyr)
library(dplry)
dput(data %>% slice(1:10))
dput(data %>% slice(1:5))
?tab_options
